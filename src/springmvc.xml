<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 扫描有注解的包 -->
    <context:component-scan base-package="handler"/>

    <!-- 配置视图解析器(InternalResourceViewResolver) success - success.jsp页面 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 加载国际化资源文件
        1.将ResourceBundleMessageSource在程序加载时加入SpringMVC：SpringMVC在启动时，会自动查找一个id="MessageSource"的bean，如果有，则自动加载
        2.如果配置了ResourceBundleMessageSource，则该类会在程序响应时接入
     -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n"/>
    </bean>

    <!-- view-name会被视图解析器加上前缀、后缀 -->
    <mvc:view-controller path="handler/testMvcViewController" view-name="success"/>

    <!-- 该注解会让SpringMVC接收一个请求，并且该请求没有对应的@requestMapping时，将该请求交给服务器默认的Servlet去处理（直接访问） -->
    <mvc:default-servlet-handler/>


    <!-- 1.将自定义转换器纳入SpringIOC容器 -->
    <bean id="myConverter" class="converter.MyConverter"/>

<!--    &lt;!&ndash; 2.将myConverter再纳入SpringMVC提供的转换器Bean &ndash;&gt;-->
<!--    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">-->
<!--        <property name="converters">-->
<!--            <set>-->
<!--                <ref bean="myConverter"/>-->
<!--            </set>-->
<!--        </property>-->
<!--    </bean>-->

    <!-- 3.将conversionService注册到annotation-driven中 -->
    <!-- 此配置是SpringMVC的基础配置，很多功能都需要通过该注解来协调 -->
<!--    <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>-->

    <mvc:annotation-driven></mvc:annotation-driven>

    <!-- 配置数据格式化注解所依赖的Bean
        FormattingConversionServiceFactoryBean：既可以实现格式化、又可以实现类型转换
     -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="myConverter"/>
            </set>
        </property>
    </bean>

    <!-- 配置CommonsMultipartResolver，用于实现文件上传，将其加入SpringIOC容器
        springIOC容器在初始化时，会自动寻找一个ID="multipartResolver"的bean，将其加入SpringIOC容器
     -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 上传单个文件的最大值，单位Byte，如果-1，表示无限制 -->
        <property name="maxUploadSize" value="104857600"/>
    </bean>


</beans>